<!-- Add a placeholder for the Twitch embed -->
<div id="twitch-embed"></div>

<!-- Load the Twitch embed script -->
<script src="https://embed.twitch.tv/embed/v1.js"></script>

<!-- Create a Twitch.Embed object that will render within the "twitch-embed" root element. -->
<script type="text/javascript">
  new Twitch.Embed("twitch-embed", {
    width: 854,
    height: 480,
    channel: "{{streamer}}"
  });
</script>

<div style="display:none" class="socket">
  <textarea class="ws-output" rows="10" style="font-family:Courier;width:100%"></textarea>
</div>

<script>
  var ws;
  var subed = false;

  // Source: https://www.thepolyglotdeveloper.com/2015/03/create-a-random-nonce-string-using-javascript/
  // 44h1k13746815ab1r2
  function nonce(length) {
    var text = "";
    var possible = "abcdefghijklmnopqrstuvwxyz0123456789";
    for (var i = 0; i < length; i++) {
      text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
  }

  function heartbeat() {
    message = {
      type: 'PING'
    };
    $('.ws-output').append('SENT: ' + JSON.stringify(message) + '\n');
    ws.send(JSON.stringify(message));
  }

  function listen(streamer, accessToken) {
    message = {
      type: 'LISTEN',
      nonce: nonce(18),
      data: {
        topics: [
          "channel-bits-events-v1." + streamer,
          "channel-bits-badge-unlocks." + streamer,
          "channel-subscribe-events-v1." + streamer,
          "channel-commerce-events-v1." + streamer,
          "whispers." + streamer
        ],
        auth_token: accessToken
      }
    };
    $('.ws-output').append('SENT: ' + JSON.stringify(message) + '\n');
    ws.send(JSON.stringify(message));
  }

  function connect() {
    var heartbeatInterval = 1000 * 60; //ms between PING's
    var reconnectInterval = 1000 * 3; //ms to wait before reconnect
    var heartbeatHandle;

    ws = new WebSocket('wss://pubsub-edge.twitch.tv');

    ws.onopen = function(event) {
      $('.ws-output').append('INFO: Socket Opened\n');
      heartbeat();
      heartbeatHandle = setInterval(heartbeat, heartbeatInterval);
    };

    ws.onerror = function(error) {
      $('.ws-output').append('ERR:  ' + JSON.stringify(error) + '\n');
    };

    ws.onmessage = function(event) {
      message = JSON.parse(event.data);
      $('.ws-output').append('RECV: ' + JSON.stringify(message) + '\n');
      if (message.type == 'PONG') {
        if (subed == false) {
          subed = true;
          listen("{{streamer}}", "{{user.accessToken}}");
        }
      } else if (message.type == 'RECONNECT') {
        $('.ws-output').append('INFO: Reconnecting...\n');
        subed = false;
        setTimeout(connect, reconnectInterval);
      }
    };

    ws.onclose = function() {
      $('.ws-output').append('INFO: Socket Closed\n');
      clearInterval(heartbeatHandle);
      $('.ws-output').append('INFO: Reconnecting...\n');
      subed = false;
      setTimeout(connect, reconnectInterval);
    };

  }

  (function() {
    connect();
    $('.socket').show()
  })();
</script>
